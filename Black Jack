# Black Jack

# The classic card game, also known as "twenty-one".
# (There is no insurance or splitting in this version.)

import random, sys

# Set constant values:
HEARTS = chr(9829)  # Symbol 9829 - ♥
DIAMONDS = chr(9830)  # Symbol 9830 - ♦
SPADES = chr(9824)  # Symbol 9824 - ♠
CLUBS = chr(9827)  # Symbol 9827 - ♣
BACKSIDE = 'backside'


def main():
    print('''Blackjack
    
    Rules:
        Try to get as close to 21 without going over.
        Kings, Queens, and Jacks are worth 10 points.
        Aces are worth 1 or 11 points.
        Cards 2 through 10 are worth their face value.
        (H)it to take another card.
        (S)tand to stop taking cards.
        On your first play, you can (D)ouble down to increase your bet
        but must hit exactly one more time before standing.
        In case of a tie, the bet is returned to the player.
        The dealer stops hitting at 17.''')

    money = 5000
    while True:  # The main loop of the game.
        # Check if the player has run out of money:
        if money <= 0:
            print("You're broke!")
            print("Good thing you weren't playing with the real money.")
            print('Thanks for playing!')
            sys.exit()

        # We give the player the opportunity to bet on the round:
        print('Money:', money)
        bet = getBet(money)

        # We hand over to the dealer and the player two cards from the deck:
        deck = getDeck()
        dealerHand = [deck.pop(), deck.pop()]
        playerHand = [deck.pop(), deck.pop()]

        # Handling player actions:
        print('Bet:', bet)
        while True:
            # Loop until the player
            # won't say "enough" or it won't overshoot.
            displayHands(playerHand, dealerHand, False)
            print()

            # Check for brute force on the player:
            if getHandValue(playerHand) > 21:
                break

            # Get the player's turn: H, S or D:
            move = getMove(playerHand, money - bet)

            # Handling player actions:
            if move == 'D':
                # The player doubles, he can increase the bet:
                additionalBet = getBet(min(bet, (money - bet)))
                bet += additionalBet
                print('Bet increased to {}.'.format(bet))
                print('Bet:', bet)

            if move in ('H', 'D'):
                # "More" or "double": the player draws one more card.
                newCard = deck.pop()
                rank, suit = newCard
                print('You drew a {} of {}.'.format(rank, suit))
                playerHand.append(newCard)

                if getHandValue(playerHand) > 21:
                    # Player's bust:
                    continue

                if move in ('S', 'D'):
                    # "Enough" or "double": move to the next player
                    break

        # Handling dealer actions:
        if getHandValue(playerHand) <= 21:
            while getHandValue(dealerHand) < 17:
                # Dealer draws another card:
                print('Dealer hits...')
                dealerHand.append(deck.pop())
                displayHands(playerHand, dealerHand, False)

                if getHandValue(dealerHand) > 21:
                    break  # Dealer's bust:
                input('Press Enter to continue...')
                print('\n\n')

        # Displays the final cards in hand:
        displayHands(playerHand, dealerHand, True)

        playerValue = getHandValue(playerHand)
        dealerValue = getHandValue(dealerHand)
        # Check if the player won, lost or tied:
        if dealerValue > 21:
            print('Dealer busts! You win ${}!'.format(bet))
            money += bet
        elif (playerValue > 21) or (playerValue < dealerValue):
            print('You lost!')
            money -= bet
        elif playerValue > dealerValue:
            print('You won ${}!'.format(bet))
            money -= bet
        elif playerValue == dealerValue:
            print('It\'s a tie, the bet is returned to you.')

        input('Press Enter to continue...')
        print('\n\n')


def getBet(maxBet):
    """We ask the player how much he bets on this round."""
    while True:  # Keep asking until you enter
        # permissible value.
        print('How much do you bet? (1-{}, or QUIT)'.format(maxBet))
        bet = input('=>').upper().strip()
        if bet == 'QUIT':
            print('Thanks for playing!')
            sys.exit()

        if not bet.isdecimal():
            continue  # If the player didn't answer, ask again.

        bet = int(bet)
        if 1 <= bet <= maxBet:
            return bet  # The player has entered a valid bet value.


def getDeck():
    """Return a list of tuples (value, suit) for all 52 cards."""
    deck = []
    for suit in (HEARTS, DIAMONDS, SPADES, CLUBS):
        for rank in range(2, 11):
            deck.append((str(rank), suit))  # Add number cards.
        for rank in ('J', 'Q', 'K', 'A'):
            deck.append((rank, suit))  # Add face cards and aces.
    random.shuffle(deck)
    return deck


def displayHands(playerHand, dealerHand, showDealerHead):
    """Display the player's and dealer's cards.
    Hide the first dealer's card if showDealerHand is False."""
    print()
    if showDealerHead:
        print('DEALER:', getHandValue(dealerHand))
        displayCards(dealerHand)
    else:
        print('DEALER: ???')
        # Hide the dealer's first card:
        displayCards([BACKSIDE] + dealerHand[1:])

    # Display the player's cards:
    print('PLAYER:', getHandValue(playerHand))
    displayCards(playerHand)


def getHandValue(cards):
    """ Return the value of the cards. Face cards are worth 10,
    Aces are worth 11 or 1 point (this function selects the appropriate card value)."""
    value = 0
    numberOfAces = 0

    # Add the value of the card - not the ace:
    for card in cards:
        rank = card[0]  # the card is a tuple (value, suit)
        if rank == 'A':
            numberOfAces += 1
        elif rank in ('K', 'Q', 'J'):  # Figure cards are worth 10 points.
            value += 10
        else:
            value += int(rank)  # The cost of numerical cards is equal to their face value.

    # Add value for aces:
    value += numberOfAces  # Add 1 for each ace.
    for i in range(numberOfAces):
        # If you can add 10 more with iteration, add:
        if value + 10 <= 21:
            value += 10
    return value


def displayCards(cards):
    """Display all cards from the list of cards."""
    rows = ['', '', '', '', '']  # The text to display on each line.

    for i, card in enumerate(cards):
        rows[0] += ' ___  '  # Display the top line of the map.
        if card == BACKSIDE:
            # Display the back of the card:
            rows[1] += '|## | '
            rows[2] += '|###| '
            rows[3] += '|_##| '
        else:
            # Display the front side of the card:
            rank, suit = card  # Map is a data structure of type tuple.
            rows[1] += '|{} | '.format(rank.ljust(2))
            rows[2] += '| {}| '.format(suit)
            rows[3] += '|_{}| '.format(rank.rjust(2, '_'))

    # Print all lines to the screen:
    for row in rows:
        print(row)


def getMove(playerHand, money):
    """Ask what move the player wants to make and return 'H' if he wants to draw another card,
    'S' if he has enough, and 'D' if he doubles."""
    while True:  # Continue iterating the loop until the player makes a valid move.
        # Determine what moves the player can make:
        moves = ['(H)it', '(S)tand']

        # The player can double on the first move, this is clear from the fact that the player has exactly two cards:
        if len(playerHand) == 2 and money > 0:
            moves.append('(D)ouble down')

        # Get the player's turn:
        movePrompt = ', '.join(moves) + '> '
        move = input(movePrompt).upper()
        if move in ('H', 'S'):
            return move  # The player has made a valid move.
        if move == 'D' and '(D)ouble down' in moves:
            return move  # The player has made a valid move.


if __name__ == '__main__':
    main()
