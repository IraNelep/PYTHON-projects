# The birthday paradox

# Simulation of the birthday paradox,

# import datetime, random
#
#
# def getBirthdays(numberOfBirthdays):
#     """Return a list of date objects for random birthdays."""
#     birthdays = []
#     for i in range(numberOfBirthdays):
# # The year in our simulation does not play a role, as long as it is the same in birthday objects.
#         startOfYear = datetime.date(2001, 1, 1)
#         # Get a random day of the year:
#         randomNumberOfDays = datetime.timedelta(random.randint(0, 364))
#         birthday = startOfYear + randomNumberOfDays
#         birthdays.append(birthday)
#     return birthdays
#
#
# def getMatch(birthdays):
#     """We return a date object of the birthday that occurs more than once in the list of birthdays."""
#     if len(birthdays) == len(set(birthdays)):
#         return None # All birthdays are different, return None
#
#     # Compare all birthdays with each other in pairs:
#     for a, birthdayA in enumerate(birthdays):
#         for b, birthdayB in enumerate(birthdays[a + 1:]):
#             if birthdayA == birthdayB:
#                 return birthdayA  # Return the found matches.
#
#
# # Display introductory information:
# print('''Birthday Paradox
# The Birthday Paradox shows us that in a group of N people, the odds
# that two of them have matching birthdays is surprisingly large.
# This program does a Monte Carlo simulation (that is, repeated random
# simulations) to explore this concept.
#
# (It's not actually a paradox, it's just a surprising result.''')
#
# # Create a tuple of month names in order:
# MONTHS = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
#
# while True: # We ask until the user enters a valid value.
#     print('How many birthdays shall I generate? (Max 100)')
#     response = input('=>')
#     if response.isdecimal() and (0 < int(response) <= 100):
#         numBDays = int(response)
#         break  # The user entered a valid value.
# print()
#
# # Generate and display birthdays:
# print('Here are', numBDays, 'birthdays:')
# birthdays = getBirthdays(numBDays)
# for i, birthday in enumerate(birthdays):
#     if i != 0:
#         # Output a comma for each birthday after the first.
#         print(', ', end='')
#     monthName = MONTHS[birthday.month - 1]
#     dateText = '{} {}'.format(monthName, birthday.day)
#     print(dateText, end='')
# print()
# print()
#
# # Find out if two coinciding birthdays occur.
# match = getMatch(birthdays)
#
# # Display results:
# print('In this simulation, ', end='')
# if match != None:
#     monthName = MONTHS[match.month - 1]
#     dateText = '{} {}'.format(monthName, match.day)
#     print('multiple people have a birthday on', dateText)
# else:
#     print("there are no matching birthdays.")
# print()
#
# # Perform 100,000 simulations:
# print('Generating', numBDays, 'random birthdays 100.000 times...')
# input('Press Enter to begin...')
#
# print('Let\'s run another 100.000 simulations.')
# simMatch = 0 # Number of simulations with matching birthdays.
# for i in range(100_000):
#     # Display a progress message every 10,000 operations:
#     if i % 10_000 == 0:
#         print(i, 'simulations run...')
#     birthdays = getBirthdays(numBDays)
#     if getMatch(birthdays) != None:
#         simMatch = simMatch + 1
# print('100.000 simulations run.')
#
# # Display simulation results:
# probability = round(simMatch / 100_000 * 100, 2)
# print('Out of 100.000 simulations of', numBDays, 'people, there was a')
# print('matching birthday in that group', simMatch, 'times. This means')
# print('that', numBDays, 'people have a', probability, '% chance of')
# print('having a matching birthday in their group.')
# print('That\'s probably more than you would think!')
